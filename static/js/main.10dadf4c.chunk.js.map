{"version":3,"sources":["styles/GlobalStyles.ts","components/Uploader.tsx","components/Handler.tsx","views/HomeView.tsx","App.tsx","index.tsx"],"names":["GlobalStyles","createGlobalStyle","Uploader","useState","imageKey","setImageKey","Dragger","name","multiple","action","process","onChange","info","status","file","response","image_key","className","InboxOutlined","message","description","type","showIcon","HandleWrapper","styled","div","Handler","imageUrl","setImageUrl","onFinish","values","key","filters","length","join","Item","label","rules","required","Group","options","value","htmlType","src","width","HomeViewWrapper","ScreenPart","VerticalDivider","Divider","HomeView","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMA4BeA,EAvBMC,YAAH,khB,oDCgCHC,I,EAAAA,EAjCf,WAAmC,IAAD,EACAC,mBAAwB,MADxB,mBACzBC,EADyB,KACfC,EADe,KAGhC,OACE,gCACE,eAAC,IAAOC,QAAR,CACEC,KAAK,QACLC,UAAU,EACVC,OAAQC,yDACRC,SAAU,SAAAC,GAAS,IACVC,EAAUD,EAAKE,KAAfD,OACQ,SAAXA,EACFR,EAAYO,EAAKE,KAAKC,SAASC,WACX,UAAXH,GACTR,EAAY,OATlB,UAaE,mBAAGY,UAAU,uBAAb,SACE,cAACC,EAAA,EAAD,MAEF,mBAAGD,UAAU,kBAAb,2DAEDb,GAAY,cAAC,IAAD,CACXe,QAAQ,iBACRC,YAAW,6BAAwBhB,EAAxB,KACXiB,KAAK,UACLC,UAAQ,Q,4CC3BVC,EAAgBC,IAAOC,IAAV,iGA0EJC,I,MAAAA,EApEf,WAAkC,IAAD,EACCvB,mBAAwB,MADzB,mBACxBwB,EADwB,KACdC,EADc,KA8B/B,OACE,eAACL,EAAD,WACE,eAAC,IAAD,CACEhB,KAAK,UACLsB,SARW,SAACC,GAChBF,EAAY,GAAD,OAAIlB,yDAAJ,gBAAiDoB,EAAOC,KAAxD,OAA+DD,EAAOE,SAAWF,EAAOE,QAAQC,OAAU,IAAMH,EAAOE,QAAQE,KAAK,KAAO,MAKpJ,UAIE,cAAC,IAAKC,KAAN,CACEC,MAAM,YACN7B,KAAK,MACL8B,MAAO,CACL,CACEC,UAAU,EACVnB,QAAS,4BANf,SAUE,cAAC,IAAD,MAEF,cAAC,IAAKgB,KAAN,CACEC,MAAM,UACN7B,KAAK,UAFP,SAIE,cAAC,IAASgC,MAAV,CAAgBC,QAjDR,CACd,CACEJ,MAAO,YACPK,MAAO,aAET,CACEL,MAAO,OACPK,MAAO,QAET,CACEL,MAAO,SACPK,MAAO,UAET,CACEL,MAAO,SACPK,MAAO,UAET,CACEL,MAAO,WACPK,MAAO,iBAgCL,cAAC,IAAKN,KAAN,UACE,cAAC,IAAD,CACEd,KAAK,UACLqB,SAAS,SAFX,+BAQHf,GAAY,cAAC,IAAD,CAAOgB,IAAKhB,EAAUiB,MAAO,UCnE1CC,EAAkBrB,IAAOC,IAAV,2GAQfqB,EAAatB,IAAOC,IAAV,gHAQVsB,EAAkBvB,YAAOwB,IAAPxB,CAAH,4CAkBNyB,MAdf,WACE,OACE,eAACJ,EAAD,WACE,cAACC,EAAD,UACE,cAAC,EAAD,MAEF,cAACC,EAAD,CAAiB1B,KAAK,aACtB,cAACyB,EAAD,UACE,cAAC,EAAD,UCpBOI,MATf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCLNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10dadf4c.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\n/**\n * Global CSS styles for application\n */\nconst GlobalStyles = createGlobalStyle`\n  html, body {\n    height: 100%;\n  }\n\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n\n  *, *::after, *::before {\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyles;\n","import {ReactElement, useState} from \"react\";\nimport {Alert, Upload} from \"antd\";\nimport {InboxOutlined} from '@ant-design/icons';\n\nfunction Uploader(): ReactElement {\n  const [imageKey, setImageKey] = useState<string | null>(null);\n\n  return (\n    <div>\n      <Upload.Dragger\n        name=\"image\"\n        multiple={false}\n        action={process.env.REACT_APP_UPLOAD_ENDPOINT}\n        onChange={info => {\n          const {status} = info.file;\n          if (status === 'done') {\n            setImageKey(info.file.response.image_key);\n          } else if (status === 'error') {\n            setImageKey(null);\n          }\n        }}\n      >\n        <p className=\"ant-upload-drag-icon\">\n          <InboxOutlined/>\n        </p>\n        <p className=\"ant-upload-text\">Click or drag image to this area to upload</p>\n      </Upload.Dragger>\n      {imageKey && <Alert\n        message=\"Image uploaded\"\n        description={`Your image key is '${imageKey}'`}\n        type=\"success\"\n        showIcon\n      />}\n    </div>\n  );\n}\n\nexport default Uploader;\n","import {ReactElement, useState} from \"react\";\nimport {Button, Checkbox, Form, Input, Image} from \"antd\";\nimport styled from \"styled-components\";\n\nconst HandleWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nfunction Handler(): ReactElement {\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\n\n  const filters = [\n    {\n      label: 'Grayscale',\n      value: 'grayscale'\n    },\n    {\n      label: 'Flip',\n      value: 'flip'\n    },\n    {\n      label: 'Invert',\n      value: 'invert'\n    },\n    {\n      label: 'Mirror',\n      value: 'mirror'\n    },\n    {\n      label: 'Equalize',\n      value: 'equalize'\n    }\n  ];\n\n  const onFinish = (values: any) => {\n    setImageUrl(`${process.env.REACT_APP_HANDLE_ENDPOINT}?key=${values.key}${(values.filters && values.filters.length) ? '&' + values.filters.join('&') : ''}`);\n  };\n\n  return (\n    <HandleWrapper>\n      <Form\n        name=\"handler\"\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Image key\"\n          name=\"key\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input image key!'\n            }\n          ]}\n        >\n          <Input/>\n        </Form.Item>\n        <Form.Item\n          label=\"Filters\"\n          name=\"filters\"\n        >\n          <Checkbox.Group options={filters}/>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n          >\n            Handle image\n          </Button>\n        </Form.Item>\n      </Form>\n      {imageUrl && <Image src={imageUrl} width={200}/>}\n    </HandleWrapper>\n  );\n}\n\nexport default Handler;\n","import {ReactElement} from \"react\";\nimport {Divider} from \"antd\";\nimport Uploader from \"../components/Uploader\";\nimport Handler from \"../components/Handler\";\nimport styled from \"styled-components\";\n\nconst HomeViewWrapper = styled.div`\n  height: 100vh;\n  width: 100vw;\n\n  display: flex;\n  align-items: center;\n`;\n\nconst ScreenPart = styled.div`\n  flex: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst VerticalDivider = styled(Divider)`\n  height: 95%;\n`;\n\nfunction HomeView(): ReactElement {\n  return (\n    <HomeViewWrapper>\n      <ScreenPart>\n        <Uploader/>\n      </ScreenPart>\n      <VerticalDivider type=\"vertical\"/>\n      <ScreenPart>\n        <Handler/>\n      </ScreenPart>\n    </HomeViewWrapper>\n  );\n}\n\nexport default HomeView;\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport GlobalStyles from './styles/GlobalStyles';\nimport HomeView from \"./views/HomeView\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyles/>\n      <HomeView/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}